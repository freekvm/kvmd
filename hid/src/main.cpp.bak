// #include <Adafruit_GFX.h>
// #include <Adafruit_SSD1306.h>
#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32

#include "FirmwareMSC.h"
#include "USB.h"
#include "USBHIDConsumerControl.h"
#include "USBHIDGamepad.h"
#include "USBHIDKeyboard.h"
#include "USBHIDMouse.h"
#include "USBHIDSystemControl.h"
#include "USBHIDVendor.h"

#if !ARDUINO_USB_MSC_ON_BOOT
FirmwareMSC MSC_Update;
#endif
#if ARDUINO_USB_CDC_ON_BOOT
#define HWSerial Serial1
#define USBSerial Serial
#else
#define HWSerial Serial
USBCDC USBSerial;
#endif

USBHID HID;
USBHIDKeyboard Keyboard;
USBHIDMouse Mouse;
USBHIDGamepad Gamepad;
USBHIDConsumerControl ConsumerControl;
USBHIDSystemControl SystemControl;
USBHIDVendor Vendor;

const int buttonPin = 0;
int previousButtonState = HIGH;

static void
usbEventCallback (void *arg, esp_event_base_t event_base, int32_t event_id, void *event_data)
{
    if (event_base == ARDUINO_USB_EVENTS)
    {
        arduino_usb_event_data_t *data = (arduino_usb_event_data_t *)event_data;
        switch (event_id)
        {
        case ARDUINO_USB_STARTED_EVENT:
            HWSerial.println ("USB PLUGGED");
            break;
        case ARDUINO_USB_STOPPED_EVENT:
            HWSerial.println ("USB UNPLUGGED");
            break;
        case ARDUINO_USB_SUSPEND_EVENT:
            HWSerial.printf ("USB SUSPENDED: remote_wakeup_en: %u\n", data->suspend.remote_wakeup_en);
            break;
        case ARDUINO_USB_RESUME_EVENT:
            HWSerial.println ("USB RESUMED");
            break;

        default:
            break;
        }
    }
    else if (event_base == ARDUINO_USB_CDC_EVENTS)
    {
        arduino_usb_cdc_event_data_t *data = (arduino_usb_cdc_event_data_t *)event_data;
        switch (event_id)
        {
        case ARDUINO_USB_CDC_CONNECTED_EVENT:
            HWSerial.println ("CDC CONNECTED");
            break;
        case ARDUINO_USB_CDC_DISCONNECTED_EVENT:
            HWSerial.println ("CDC DISCONNECTED");
            break;
        case ARDUINO_USB_CDC_LINE_STATE_EVENT:
            HWSerial.printf ("CDC LINE STATE: dtr: %u, rts: %u\n", data->line_state.dtr, data->line_state.rts);
            break;
        case ARDUINO_USB_CDC_LINE_CODING_EVENT:
            HWSerial.printf ("CDC LINE CODING: bit_rate: %u, data_bits: %u, stop_bits: %u, parity: %u\n", data->line_coding.bit_rate, data->line_coding.data_bits, data->line_coding.stop_bits, data->line_coding.parity);
            break;
        case ARDUINO_USB_CDC_RX_EVENT:
            HWSerial.printf ("CDC RX [%u]:", data->rx.len);
            {
                uint8_t buf[data->rx.len];
                size_t len = USBSerial.read (buf, data->rx.len);
                HWSerial.write (buf, len);
            }
            HWSerial.println ();
            break;
        case ARDUINO_USB_CDC_RX_OVERFLOW_EVENT:
            HWSerial.printf ("CDC RX Overflow of %d bytes", data->rx_overflow.dropped_bytes);
            break;

        default:
            break;
        }
    }
    else if (event_base == ARDUINO_FIRMWARE_MSC_EVENTS)
    {
        arduino_firmware_msc_event_data_t *data = (arduino_firmware_msc_event_data_t *)event_data;
        switch (event_id)
        {
        case ARDUINO_FIRMWARE_MSC_START_EVENT:
            HWSerial.println ("MSC Update Start");
            break;
        case ARDUINO_FIRMWARE_MSC_WRITE_EVENT:
            // HWSerial.printf("MSC Update Write %u bytes at offset %u\n", data->write.size, data->write.offset);
            HWSerial.print (".");
            break;
        case ARDUINO_FIRMWARE_MSC_END_EVENT:
            HWSerial.printf ("\nMSC Update End: %u bytes\n", data->end.size);
            break;
        case ARDUINO_FIRMWARE_MSC_ERROR_EVENT:
            HWSerial.printf ("MSC Update ERROR! Progress: %u bytes\n", data->error.size);
            break;
        case ARDUINO_FIRMWARE_MSC_POWER_EVENT:
            HWSerial.printf ("MSC Update Power: power: %u, start: %u, eject: %u\n", data->power.power_condition, data->power.start, data->power.load_eject);
            break;

        default:
            break;
        }
    }
    else if (event_base == ARDUINO_USB_HID_EVENTS)
    {
        arduino_usb_hid_event_data_t *data = (arduino_usb_hid_event_data_t *)event_data;
        switch (event_id)
        {
        case ARDUINO_USB_HID_SET_PROTOCOL_EVENT:
            HWSerial.printf ("HID SET PROTOCOL: %s\n", data->set_protocol.protocol ? "REPORT" : "BOOT");
            break;
        case ARDUINO_USB_HID_SET_IDLE_EVENT:
            HWSerial.printf ("HID SET IDLE: %u\n", data->set_idle.idle_rate);
            break;

        default:
            break;
        }
    }
    else if (event_base == ARDUINO_USB_HID_KEYBOARD_EVENTS)
    {
        arduino_usb_hid_keyboard_event_data_t *data = (arduino_usb_hid_keyboard_event_data_t *)event_data;
        switch (event_id)
        {
        case ARDUINO_USB_HID_KEYBOARD_LED_EVENT:
            HWSerial.printf ("HID KEYBOARD LED: NumLock:%u, CapsLock:%u, ScrollLock:%u\n", data->numlock, data->capslock, data->scrolllock);
            break;

        default:
            break;
        }
    }
    else if (event_base == ARDUINO_USB_HID_VENDOR_EVENTS)
    {
        arduino_usb_hid_vendor_event_data_t *data = (arduino_usb_hid_vendor_event_data_t *)event_data;
        switch (event_id)
        {
        case ARDUINO_USB_HID_VENDOR_GET_FEATURE_EVENT:
            HWSerial.printf ("HID VENDOR GET FEATURE: len:%u\n", data->len);
            for (uint16_t i = 0; i < data->len; i++)
            {
                HWSerial.write (data->buffer[i] ? data->buffer[i] : '.');
            }
            HWSerial.println ();
            break;
        case ARDUINO_USB_HID_VENDOR_SET_FEATURE_EVENT:
            HWSerial.printf ("HID VENDOR SET FEATURE: len:%u\n", data->len);
            for (uint16_t i = 0; i < data->len; i++)
            {
                HWSerial.write (data->buffer[i] ? data->buffer[i] : '.');
            }
            HWSerial.println ();
            break;
        case ARDUINO_USB_HID_VENDOR_OUTPUT_EVENT:
            HWSerial.printf ("HID VENDOR OUTPUT: len:%u\n", data->len);
            for (uint16_t i = 0; i < data->len; i++)
            {
                HWSerial.write (Vendor.read ());
            }
            HWSerial.println ();
            break;

        default:
            break;
        }
    }
}

// #define OLED_RESET 18
// #define SCREEN_ADDRESS 0x3C
// void testdrawline (); // Draw many lines

// void testdrawrect (); // Draw rectangles (outlines)

// void testfillrect (); // Draw rectangles (filled)

// void testdrawcircle (); // Draw circles (outlines)

// void testfillcircle (); // Draw circles (filled)

// void testdrawroundrect (); // Draw rounded rectangles (outlines)

// void testfillroundrect (); // Draw rounded rectangles (filled)

// void testdrawtriangle (); // Draw triangles (outlines)

// void testfilltriangle (); // Draw triangles (filled)

// void testdrawchar (); // Draw characters of the default font

// void testdrawstyles (); // Draw 'stylized' characters

// void testscrolltext (); // Draw scrolling text

// void testdrawbitmap (); // Draw a small bitmap image

// void testanimate (const uint8_t *bitmap, uint8_t w, uint8_t h);

// Adafruit_SSD1306 display (SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

int led_state = HIGH;
static unsigned long last = 0;

// #define NUMFLAKES 10 // Number of snowflakes in the animation example

// #define LOGO_HEIGHT 16
// #define LOGO_WIDTH 16
// static const unsigned char PROGMEM logo_bmp[] = { 0b00000000, 0b11000000,
//                                                   0b00000001, 0b11000000,
//                                                   0b00000001, 0b11000000,
//                                                   0b00000011, 0b11100000,
//                                                   0b11110011, 0b11100000,
//                                                   0b11111110, 0b11111000,
//                                                   0b01111110, 0b11111111,
//                                                   0b00110011, 0b10011111,
//                                                   0b00011111, 0b11111100,
//                                                   0b00001101, 0b01110000,
//                                                   0b00011011, 0b10100000,
//                                                   0b00111111, 0b11100000,
//                                                   0b00111111, 0b11110000,
//                                                   0b01111100, 0b11110000,
//                                                   0b01110000, 0b01110000,
//                                                   0b00000000, 0b00110000 };

#define SERIAL1_RX 11
#define SERIAL1_TX 12

void
setup ()
{
    pinMode (LED_BUILTIN, OUTPUT);
#ifdef CMD_SERIAL
    CMD_SERIAL.begin (CMD_SERIAL_SPEED, SERIAL_8N1);
    Serial1.begin (115200, SERIAL_8N1, SERIAL1_RX, SERIAL1_TX);
    Serial1.write ("Hello World\r\n");
#elif defined(CMD_SPI)
    spiBegin ();
#endif

    // HWSerial.begin (115200);
    HWSerial.setDebugOutput (true);

    USB.onEvent (usbEventCallback);
    USBSerial.onEvent (usbEventCallback);
    MSC_Update.onEvent (usbEventCallback);
    HID.onEvent (usbEventCallback);
    Keyboard.onEvent (usbEventCallback);
    Vendor.onEvent (usbEventCallback);

    USBSerial.begin ();
    MSC_Update.begin ();
    Vendor.begin ();
    Mouse.begin ();
    Keyboard.begin ();
    Gamepad.begin ();
    ConsumerControl.begin ();
    SystemControl.begin ();
    USB.begin ();

    // // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    // if (!display.begin (SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
    // {
    //     Serial.println (F ("SSD1306 allocation failed"));
    // }

    // // Show initial display buffer contents on the screen --
    // // the library initializes this with an Adafruit splash screen.
    // display.display ();
    // delay (2000); // Pause for 2 seconds

    // // Clear the buffer
    // display.clearDisplay ();

    // // Draw a single pixel in white
    // display.drawPixel (10, 10, SSD1306_WHITE);

    // // Show the display buffer on the screen. You MUST call display() after
    // // drawing commands to make them visible on screen!
    // display.display ();
    // delay (2000);
    // // display.display() is NOT necessary after every single drawing command,
    // // unless that's what you want...rather, you can batch up a bunch of
    // // drawing operations and then update the screen all at once by calling
    // // display.display(). These examples demonstrate both approaches...

    // testdrawline (); // Draw many lines

    // testdrawrect (); // Draw rectangles (outlines)

    // testfillrect (); // Draw rectangles (filled)

    // testdrawcircle (); // Draw circles (outlines)

    // testfillcircle (); // Draw circles (filled)

    // testdrawroundrect (); // Draw rounded rectangles (outlines)

    // testfillroundrect (); // Draw rounded rectangles (filled)

    // testdrawtriangle (); // Draw triangles (outlines)

    // testfilltriangle (); // Draw triangles (filled)

    // testdrawchar (); // Draw characters of the default font

    // testdrawstyles (); // Draw 'stylized' characters

    // testscrolltext (); // Draw scrolling text

    // testdrawbitmap (); // Draw a small bitmap image

    // testanimate (logo_bmp, LOGO_WIDTH, LOGO_HEIGHT); // Animate bitmaps
}

void
loop ()
{

    static uint8_t buffer[8];
    static uint8_t index = 0;
    if (millis () - last > 1000)
    {
        last += 1000;
        led_state = HIGH;
        // led_state = led_state == HIGH ? LOW : HIGH;
        // digitalWrite (LED_BUILTIN, led_state);
        // display.invertDisplay (led_state);
        CMD_SERIAL.write ("HI\r\n");
    }
    if (CMD_SERIAL.available () > 0)
    {

        CMD_SERIAL.write ("HI");
    }
    int buttonState = digitalRead (buttonPin);
    if (HID.ready () && buttonState != previousButtonState)
    {
        previousButtonState = buttonState;
        if (buttonState == LOW)
        {
            HWSerial.println ("Button Pressed");
            USBSerial.println ("Button Pressed");
            Vendor.println ("Button Pressed");
            Mouse.move (10, 10);
            Keyboard.pressRaw (HID_KEY_CAPS_LOCK);
            Gamepad.leftStick (100, 100);
            ConsumerControl.press (CONSUMER_CONTROL_VOLUME_INCREMENT);
            // SystemControl.press(SYSTEM_CONTROL_POWER_OFF);
        }
        else
        {
            Keyboard.releaseRaw (HID_KEY_CAPS_LOCK);
            Gamepad.leftStick (0, 0);
            ConsumerControl.release ();
            // SystemControl.release();
            Vendor.println ("Button Released");
            USBSerial.println ("Button Released");
            HWSerial.println ("Button Released");
        }
        delay (100);
    }

    while (HWSerial.available ())
    {
        size_t l = HWSerial.available ();
        uint8_t b[l];
        l = HWSerial.read (b, l);
        USBSerial.write (b, l);
        if (HID.ready ())
        {
            Vendor.write (b, l);
        }
    }
}

#if false
void
testdrawline ()
{
    int16_t i;

    display.clearDisplay (); // Clear display buffer

    for (i = 0; i < display.width (); i += 4)
    {
        display.drawLine (0, 0, i, display.height () - 1, SSD1306_WHITE);
        display.display (); // Update screen with each newly-drawn line
        delay (1);
    }
    for (i = 0; i < display.height (); i += 4)
    {
        display.drawLine (0, 0, display.width () - 1, i, SSD1306_WHITE);
        display.display ();
        delay (1);
    }
    delay (250);

    display.clearDisplay ();

    for (i = 0; i < display.width (); i += 4)
    {
        display.drawLine (0, display.height () - 1, i, 0, SSD1306_WHITE);
        display.display ();
        delay (1);
    }
    for (i = display.height () - 1; i >= 0; i -= 4)
    {
        display.drawLine (0, display.height () - 1, display.width () - 1, i, SSD1306_WHITE);
        display.display ();
        delay (1);
    }
    delay (250);

    display.clearDisplay ();

    for (i = display.width () - 1; i >= 0; i -= 4)
    {
        display.drawLine (display.width () - 1, display.height () - 1, i, 0, SSD1306_WHITE);
        display.display ();
        delay (1);
    }
    for (i = display.height () - 1; i >= 0; i -= 4)
    {
        display.drawLine (display.width () - 1, display.height () - 1, 0, i, SSD1306_WHITE);
        display.display ();
        delay (1);
    }
    delay (250);

    display.clearDisplay ();

    for (i = 0; i < display.height (); i += 4)
    {
        display.drawLine (display.width () - 1, 0, 0, i, SSD1306_WHITE);
        display.display ();
        delay (1);
    }
    for (i = 0; i < display.width (); i += 4)
    {
        display.drawLine (display.width () - 1, 0, i, display.height () - 1, SSD1306_WHITE);
        display.display ();
        delay (1);
    }

    delay (2000); // Pause for 2 seconds
}

void
testdrawrect (void)
{
    display.clearDisplay ();

    for (int16_t i = 0; i < display.height () / 2; i += 2)
    {
        display.drawRect (i, i, display.width () - 2 * i, display.height () - 2 * i, SSD1306_WHITE);
        display.display (); // Update screen with each newly-drawn rectangle
        delay (1);
    }

    delay (2000);
}

void
testfillrect (void)
{
    display.clearDisplay ();

    for (int16_t i = 0; i < display.height () / 2; i += 3)
    {
        // The INVERSE color is used so rectangles alternate white/black
        display.fillRect (i, i, display.width () - i * 2, display.height () - i * 2, SSD1306_INVERSE);
        display.display (); // Update screen with each newly-drawn rectangle
        delay (1);
    }

    delay (2000);
}

void
testdrawcircle (void)
{
    display.clearDisplay ();

    for (int16_t i = 0; i < max (display.width (), display.height ()) / 2; i += 2)
    {
        display.drawCircle (display.width () / 2, display.height () / 2, i, SSD1306_WHITE);
        display.display ();
        delay (1);
    }

    delay (2000);
}

void
testfillcircle (void)
{
    display.clearDisplay ();

    for (int16_t i = max (display.width (), display.height ()) / 2; i > 0; i -= 3)
    {
        // The INVERSE color is used so circles alternate white/black
        display.fillCircle (display.width () / 2, display.height () / 2, i, SSD1306_INVERSE);
        display.display (); // Update screen with each newly-drawn circle
        delay (1);
    }

    delay (2000);
}

void
testdrawroundrect (void)
{
    display.clearDisplay ();

    for (int16_t i = 0; i < display.height () / 2 - 2; i += 2)
    {
        display.drawRoundRect (i, i, display.width () - 2 * i, display.height () - 2 * i,
                               display.height () / 4, SSD1306_WHITE);
        display.display ();
        delay (1);
    }

    delay (2000);
}

void
testfillroundrect (void)
{
    display.clearDisplay ();

    for (int16_t i = 0; i < display.height () / 2 - 2; i += 2)
    {
        // The INVERSE color is used so round-rects alternate white/black
        display.fillRoundRect (i, i, display.width () - 2 * i, display.height () - 2 * i,
                               display.height () / 4, SSD1306_INVERSE);
        display.display ();
        delay (1);
    }

    delay (2000);
}

void
testdrawtriangle (void)
{
    display.clearDisplay ();

    for (int16_t i = 0; i < max (display.width (), display.height ()) / 2; i += 5)
    {
        display.drawTriangle (
            display.width () / 2, display.height () / 2 - i,
            display.width () / 2 - i, display.height () / 2 + i,
            display.width () / 2 + i, display.height () / 2 + i, SSD1306_WHITE);
        display.display ();
        delay (1);
    }

    delay (2000);
}

void
testfilltriangle (void)
{
    display.clearDisplay ();

    for (int16_t i = max (display.width (), display.height ()) / 2; i > 0; i -= 5)
    {
        // The INVERSE color is used so triangles alternate white/black
        display.fillTriangle (
            display.width () / 2, display.height () / 2 - i,
            display.width () / 2 - i, display.height () / 2 + i,
            display.width () / 2 + i, display.height () / 2 + i, SSD1306_INVERSE);
        display.display ();
        delay (1);
    }

    delay (2000);
}

void
testdrawchar (void)
{
    display.clearDisplay ();

    display.setTextSize (1);              // Normal 1:1 pixel scale
    display.setTextColor (SSD1306_WHITE); // Draw white text
    display.setCursor (0, 0);             // Start at top-left corner
    display.cp437 (true);                 // Use full 256 char 'Code Page 437' font

    // Not all the characters will fit on the display. This is normal.
    // Library will draw what it can and the rest will be clipped.
    for (int16_t i = 0; i < 256; i++)
    {
        if (i == '\n')
            display.write (' ');
        else
            display.write (i);
    }

    display.display ();
    delay (2000);
}

void
testdrawstyles (void)
{
    display.clearDisplay ();

    display.setTextSize (1);              // Normal 1:1 pixel scale
    display.setTextColor (SSD1306_WHITE); // Draw white text
    display.setCursor (0, 0);             // Start at top-left corner
    display.println (F ("Hello, world!"));

    display.setTextColor (SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
    display.println (3.141592);

    display.setTextSize (2); // Draw 2X-scale text
    display.setTextColor (SSD1306_WHITE);
    display.print (F ("0x"));
    display.println (0xDEADBEEF, HEX);

    display.display ();
    delay (2000);
}

void
testscrolltext (void)
{
    display.clearDisplay ();

    display.setTextSize (2); // Draw 2X-scale text
    display.setTextColor (SSD1306_WHITE);
    display.setCursor (10, 0);
    display.println (F ("scroll"));
    display.display (); // Show initial text
    delay (100);

    // Scroll in various directions, pausing in-between:
    display.startscrollright (0x00, 0x0F);
    delay (2000);
    display.stopscroll ();
    delay (1000);
    display.startscrollleft (0x00, 0x0F);
    delay (2000);
    display.stopscroll ();
    delay (1000);
    display.startscrolldiagright (0x00, 0x07);
    delay (2000);
    display.startscrolldiagleft (0x00, 0x07);
    delay (2000);
    display.stopscroll ();
    delay (1000);
}

void
testdrawbitmap (void)
{
    display.clearDisplay ();

    display.drawBitmap (
        (display.width () - LOGO_WIDTH) / 2,
        (display.height () - LOGO_HEIGHT) / 2,
        logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
    display.display ();
    delay (1000);
}

#define XPOS 0 // Indexes into the 'icons' array in function below
#define YPOS 1
#define DELTAY 2

void
testanimate (const uint8_t *bitmap, uint8_t w, uint8_t h)
{
    int8_t f, icons[NUMFLAKES][3];

    // Initialize 'snowflake' positions
    for (f = 0; f < NUMFLAKES; f++)
    {
        icons[f][XPOS] = random (1 - LOGO_WIDTH, display.width ());
        icons[f][YPOS] = -LOGO_HEIGHT;
        icons[f][DELTAY] = random (1, 6);
        Serial.print (F ("x: "));
        Serial.print (icons[f][XPOS], DEC);
        Serial.print (F (" y: "));
        Serial.print (icons[f][YPOS], DEC);
        Serial.print (F (" dy: "));
        Serial.println (icons[f][DELTAY], DEC);
    }

    for (;;)
    {                            // Loop forever...
        display.clearDisplay (); // Clear the display buffer

        // Draw each snowflake:
        for (f = 0; f < NUMFLAKES; f++)
        {
            display.drawBitmap (icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SSD1306_WHITE);
        }

        display.display (); // Show the display buffer on the screen
        delay (200);        // Pause for 1/10 second

        // Then update coordinates of each flake...
        for (f = 0; f < NUMFLAKES; f++)
        {
            icons[f][YPOS] += icons[f][DELTAY];
            // If snowflake is off the bottom of the screen...
            if (icons[f][YPOS] >= display.height ())
            {
                // Reinitialize to a random position, just off the top
                icons[f][XPOS] = random (1 - LOGO_WIDTH, display.width ());
                icons[f][YPOS] = -LOGO_HEIGHT;
                icons[f][DELTAY] = random (1, 6);
            }
        }
    }
}
#endif